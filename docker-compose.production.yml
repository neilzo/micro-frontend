version: "3"

services:
  database:
    image: mongo:4.2.5-bionic
    container_name: "database"
    env_file: .env.production
    environment:
      - MONGO_USERNAME=$MONGO_USERNAME
      - MONGO_PASSWORD=$MONGO_PASSWORD
    ports:
      - 27017:27017
    volumes:
      - db_data:/data/db
      - ./scripts/initMongo.js:/docker-entrypoint-initdb.d/init-mongo-js:ro
    restart: always
    networks:
      - micro-frontend-network
  nginx:
    container_name: "nginx"
    build:
      context: "./nginx"
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    networks:
      - micro-frontend-network
  container-server:
    image: ${REPO:-neilzo}/micro-frontend-container:${TAG:-latest}
    command: yarn start --scope container start:server --stream
    container_name: "container-server"
    ports:
      - "5000:5000"
    networks:
      - micro-frontend-network
  recipe-server:
    container_name: "recipe-server"
    image: ${REPO:-neilzo}/micro-frontend-recipe:${TAG:-latest}
    command: yarn start --scope recipe start:server --stream
    depends_on:
      - database
    env_file: .env.production
    environment:
      - MONGO_USERNAME=$MONGO_USERNAME
      - MONGO_PASSWORD=$MONGO_PASSWORD
      - MONGO_HOSTNAME=database
      - MONGO_PORT=$MONGO_PORT
      - MONGO_DB=$MONGO_DB
    ports:
      - "5002:5002"
    restart: always
    networks:
      - micro-frontend-network
  search-server:
    container_name: "search-server"
    image: ${REPO:-neilzo}/micro-frontend-search:${TAG:-latest}
    command: yarn start --scope search start:server --stream
    ports:
      - "5001:5001"
    restart: always
    networks:
      - micro-frontend-network

networks:
  micro-frontend-network:
    driver: bridge

volumes:
  db_data: