version: "3"

services:
  database:
    image: mongo:4.2.5-bionic
    container_name: "database"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
    ports:
      - 27017:27017
    volumes:
      - db_data:/data/db
      - ./scripts/initMongo.js:/docker-entrypoint-initdb.d/init-mongo-js:ro
    networks:
      - micro-frontend-network
  container-server:
    build:
      context: "./packages/container"
      dockerfile: "Dockerfile"
    container_name: "container-server"
    volumes:
      - "./packages/container:/opt/app/container/"
      - "/opt/app/container/node_modules"
    ports:
      - "5000:5000"
    networks:
      - micro-frontend-network
  container-client:
    build:
      context: "./packages/container"
      dockerfile: "Dockerfile.client"
    container_name: "container-client"
    volumes:
      - "./packages/container:/opt/app/container/"
      - "/opt/app/container/node_modules"
    ports:
      - "3000:3000"
    networks:
      - micro-frontend-network
  recipe-server:
    container_name: "recipe-server"
    build:
      context: "./packages/recipe"
      dockerfile: "Dockerfile"
    volumes:
      - "./packages/recipe:/opt/app/recipe/"
      - "/opt/app/recipe/node_modules"
    env_file: .env
    environment:
      - MONGO_USERNAME=$MONGO_USERNAME
      - MONGO_PASSWORD=$MONGO_PASSWORD
      - MONGO_HOSTNAME=database
      - MONGO_PORT=$MONGO_PORT
      - MONGO_DB=$MONGO_DB
    ports:
      - "5002:5002"
    depends_on:
      - database
    networks:
      - micro-frontend-network
  recipe-client:
    container_name: "recipe-client"
    build:
      context: "./packages/recipe"
      dockerfile: "Dockerfile.client"
    volumes:
      - "./packages/recipe:/opt/app/recipe/"
      - "/opt/app/recipe/node_modules"
    ports:
      - "3002:3002"
    networks:
      - micro-frontend-network
  search-server:
    container_name: "search-server"
    build:
      context: "./packages/search"
      dockerfile: "Dockerfile"
    volumes:
      - "./packages/search:/opt/app/search/"
      - "/opt/app/search/node_modules"
    ports:
      - "5001:5001"
    networks:
      - micro-frontend-network
  search-client:
    container_name: "search-client"
    build:
      context: "./packages/search"
      dockerfile: "Dockerfile.client"
    volumes:
      - "./packages/search:/opt/app/search/"
      - "/opt/app/search/node_modules"
    depends_on:
      - search-server
    ports:
      - "3001:3001"
    networks:
      - micro-frontend-network

networks:
  micro-frontend-network:
    driver: bridge

volumes:
  db_data: